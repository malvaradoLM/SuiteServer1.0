//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RPSuiteServer
{
    using System;
    using System.Collections.Generic;
    using RemObjects.SDK;
    using RemObjects.SDK.Types;
    using RemObjects.SDK.Server;
    using RemObjects.SDK.Server.ClassFactories;
    using RemObjects.DataAbstract.Server;
    using RemObjects.DataAbstract;
    using System.Data;

    [RemObjects.SDK.Server.ClassFactories.StandardClassFactory()]
    [RemObjects.SDK.Server.Service(Name = "RPLoginService", InvokerClass = typeof(RPLoginService_Invoker), ActivatorClass = typeof(RPLoginService_Activator))]
    public class RPLoginService : RemObjects.DataAbstract.Server.SimpleLoginService, IRPLoginService
    {
        private System.ComponentModel.IContainer components;

        public RPLoginService() :
                this(null, null)
        {
        }
        public RPLoginService(ISessionManager sessionManager, IEventSinkManager eventManager) :
                base(sessionManager, eventManager)
        {
            this.InitializeComponent();
        }
        private void InitializeComponent()
        {
        }
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                if ((this.components != null))
                {
                    this.components.Dispose();
                }
            }
            base.Dispose(disposing);
        }

        private IAbstractConnection localConnection
        {
            get
            {
                if (this.Connection == null)
                {
                    this.Connection = Engine.Instance.NewConnecion();
                }

                return this.Connection;
            }
        }
        public override Boolean Login(String userId, String password, out UserInfo userInfo)
        {
            //Create and hook new Data Service instance. With it's help it is possible to execute Schema command.
            var dataService = new RPDataService();
            //dataService.Activate(this.SessionID, false);

            IDbCommand lcommand;
            var reader = dataService.ServiceSchema.GetDataReader(localConnection, "spLogin", new string[] { "Usuario", "Clave" }, new object[] { userId, password }, out lcommand);
            Boolean lIsLoginSuccessful = (((System.Data.Common.DbDataReader)reader).HasRows);

            if (lIsLoginSuccessful)
            {
                // This is an example of setting user-specific session information
                this.Session["UserID"] = userId;

                userInfo = new UserInfo();
                userInfo.UserID = userId;
            }
            else
            {
                this.DestroySession();
                userInfo = null;
            }

            return (lIsLoginSuccessful);
        }

        public override Boolean LoginEx(String loginString)
        {
            // LoginEx infrastructure provides unified way to set additional login parameters
            // (like DomainName for Relativity)
            // Note how LoginEx string is parsed and actual login method is called

            LoginStringParser lLoginString = new LoginStringParser(loginString);

            UserInfo lDummy;
            return (this.Login(lLoginString.Username, lLoginString.Password, out lDummy));
        }

        public override void Logout()
        {
            // Perform actions needed for user logout

            this.DestroySession();
        }
    }
}
